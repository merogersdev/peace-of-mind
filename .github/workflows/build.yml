---
name: Build and Deploy to AWS
on:
  push:
    branches: [feat/59-add-cicd-pipeline]
jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DB_REPO: ${{ secrets.DB_REPO }}
      FRONTEND_REPO: ${{ secrets.FRONTEND_REPO }}
      BACKEND_REPO: ${{ secrets.BACKEND_REPO }}
      IMAGE_TAG: latest
    steps:
      # Checkout Repo
      - name: Checkout
        uses: actions/checkout@v2
      # Configure AWS Creds
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      # Login to AWS ECR
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # Build, Tag, Push to AWS ECR
      - name: Build, Tag, Push to AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          DB_REPO: ${{ env.DB_REPO }}
          BACKEND_REPO: ${{ env.BACKEND_REPO }}
          FRONTEND_REPO: ${{ env.FRONTEND_REPO }}
        run: |
          docker build -t $ECR_REGISTRY/$DB_REPO:$IMAGE_TAG ./db/
          docker build -t $ECR_REGISTRY/$BACKEND_REPO:$IMAGE_TAG ./backend/
          docker build -t $ECR_REGISTRY/$FRONTEND_REPO:$IMAGE_TAG ./frontend/
          docker push $ECR_REGISTRY/$DB_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$BACKEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$FRONTEND_REPO:$IMAGE_TAG
      #SSH to AWS EC2 Instance and deploy
      - name: "SSH"
        uses: appleboy/ssh-action@v1.0.3
        env:
          PG_USER: "peaceofmind"
          PG_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
          PG_DB: "peaceofmind"
          PG_DB_TEST: "peaceofmind_test"
          PG_PORT: 5432
          PG_HOST: "${{ secrets.DB_REPO }}"
          DB_IMAGE: ${{ secrets.DB_REPO }}
          FRONTEND_IMAGE: ${{ secrets.FRONTEND_REPO }}
          BACKEND_IMAGE: ${{ secrets.BACKEND_REPO }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          JWT_SECRET: "${{ secrets.JWT_SECRET }}"
          API_KEY: "${{ secrets.API_KEY }}"
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          envs: PG_USER,PG_PASSWORD,PG_DB,PG_DB_TEST,PG_PORT,DB_IMAGE,FRONTEND_IMAGE,BACKEND_IMAGE,JWT_SECRET,API_KEY,ECR_REGISTRY,PG_HOST
          script: |
            aws ecr get-login-password --region ca-central-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker stop $(docker ps -aq)
            docker rm $(docker ps -aq)
            docker run -d --restart=unless-stopped -p 5432:5432 -e POSTGRES_USER=$PG_USER -e POSTGRES_PASSWORD=$PG_PASSWORD -e POSTGRES_DB=$PG_DB -e POSTGRES_DB_TEST=$PG_DB_TEST --name $DB_IMAGE $ECR_REGISTRY/$DB_IMAGE:latest
            docker run -d --restart=unless-stopped -p 5000:5000 -e NODE_ENV='production' -e DB_HOST='host.docker.internal' -e DB_PORT=$PG_PORT -e DB_USER=$PG_USER -e DB_PASS=$PG_PASSWORD -e DB_DATA=$PG_DB -e DB_DATA_TEST=$PG_DB_TEST -e JWT_SECRET=$JWT_SECRET -e API_KEY=$API_KEY --name $BACKEND_IMAGE $ECR_REGISTRY/$BACKEND_IMAGE:latest
            docker run -d --restart=unless-stopped -p 3000:80 --name $FRONTEND_IMAGE $ECR_REGISTRY/$FRONTEND_IMAGE:latest
